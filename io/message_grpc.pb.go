// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package io

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MessageReportServiceClient is the client API for MessageReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageReportServiceClient interface {
	Send(ctx context.Context, in *IOMessage, opts ...grpc.CallOption) (*IOResponse, error)
	SendBatch(ctx context.Context, in *IOMessageBatch, opts ...grpc.CallOption) (*IOResponse, error)
	SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageReportService_SendStreamClient, error)
}

type messageReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageReportServiceClient(cc grpc.ClientConnInterface) MessageReportServiceClient {
	return &messageReportServiceClient{cc}
}

func (c *messageReportServiceClient) Send(ctx context.Context, in *IOMessage, opts ...grpc.CallOption) (*IOResponse, error) {
	out := new(IOResponse)
	err := c.cc.Invoke(ctx, "/io.MessageReportService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageReportServiceClient) SendBatch(ctx context.Context, in *IOMessageBatch, opts ...grpc.CallOption) (*IOResponse, error) {
	out := new(IOResponse)
	err := c.cc.Invoke(ctx, "/io.MessageReportService/SendBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageReportServiceClient) SendStream(ctx context.Context, opts ...grpc.CallOption) (MessageReportService_SendStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageReportService_serviceDesc.Streams[0], "/io.MessageReportService/SendStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageReportServiceSendStreamClient{stream}
	return x, nil
}

type MessageReportService_SendStreamClient interface {
	Send(*IOMessage) error
	CloseAndRecv() (*IOResponse, error)
	grpc.ClientStream
}

type messageReportServiceSendStreamClient struct {
	grpc.ClientStream
}

func (x *messageReportServiceSendStreamClient) Send(m *IOMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageReportServiceSendStreamClient) CloseAndRecv() (*IOResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(IOResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageReportServiceServer is the server API for MessageReportService service.
// All implementations must embed UnimplementedMessageReportServiceServer
// for forward compatibility
type MessageReportServiceServer interface {
	Send(context.Context, *IOMessage) (*IOResponse, error)
	SendBatch(context.Context, *IOMessageBatch) (*IOResponse, error)
	SendStream(MessageReportService_SendStreamServer) error
	mustEmbedUnimplementedMessageReportServiceServer()
}

// UnimplementedMessageReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageReportServiceServer struct {
}

func (UnimplementedMessageReportServiceServer) Send(context.Context, *IOMessage) (*IOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessageReportServiceServer) SendBatch(context.Context, *IOMessageBatch) (*IOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatch not implemented")
}
func (UnimplementedMessageReportServiceServer) SendStream(MessageReportService_SendStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SendStream not implemented")
}
func (UnimplementedMessageReportServiceServer) mustEmbedUnimplementedMessageReportServiceServer() {}

// UnsafeMessageReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageReportServiceServer will
// result in compilation errors.
type UnsafeMessageReportServiceServer interface {
	mustEmbedUnimplementedMessageReportServiceServer()
}

func RegisterMessageReportServiceServer(s grpc.ServiceRegistrar, srv MessageReportServiceServer) {
	s.RegisterService(&_MessageReportService_serviceDesc, srv)
}

func _MessageReportService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReportServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.MessageReportService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReportServiceServer).Send(ctx, req.(*IOMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageReportService_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOMessageBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageReportServiceServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.MessageReportService/SendBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageReportServiceServer).SendBatch(ctx, req.(*IOMessageBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageReportService_SendStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageReportServiceServer).SendStream(&messageReportServiceSendStreamServer{stream})
}

type MessageReportService_SendStreamServer interface {
	SendAndClose(*IOResponse) error
	Recv() (*IOMessage, error)
	grpc.ServerStream
}

type messageReportServiceSendStreamServer struct {
	grpc.ServerStream
}

func (x *messageReportServiceSendStreamServer) SendAndClose(m *IOResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageReportServiceSendStreamServer) Recv() (*IOMessage, error) {
	m := new(IOMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.MessageReportService",
	HandlerType: (*MessageReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageReportService_Send_Handler,
		},
		{
			MethodName: "SendBatch",
			Handler:    _MessageReportService_SendBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStream",
			Handler:       _MessageReportService_SendStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "io/message.proto",
}
